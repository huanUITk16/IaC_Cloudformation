AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC, private subnet, public subnet, NAT Gateway, Internet Gateway, public route table, private route table

Resources:
  VPC1:
    Type: AWS::EC2::VPC # Create VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.192.0.0/16
      Tags:
        - Key: Name
          Value: Lab1_VPC

  InternetGateway1: # Create internet gateway
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Lab1_Group3_InternetGateway


  GatewayAttachment:  # Attach Internetgateway1 to VPC and establish connection between VPC and Internet
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC1
      InternetGatewayId: !Ref InternetGateway1

  VPCDefaultSecurityGroup: # Create VPC default security group 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for VPC
      VpcId: !Ref VPC1
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Lab1_Group3_VPCDefaultSecurityGroup

  PublicSubnet1: # Create public subnet
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - '0'
          - Fn::GetAZs: !Ref 'AWS::Region'
        MapPublicIpOnLaunch: 'true'
        CidrBlock: 10.192.10.0/24
        Tags:
        - Key: Name
          Value: Lab1_Group3_PublicSubnet
        VpcId: !Ref VPC1

  PrivateSubnet1: # Create private subnet
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: 'true'
      CidrBlock: 10.192.11.0/24
      Tags:
      - Key: Name
        Value: Lab1_Group3_PrivateSubnet
      VpcId: !Ref VPC1

  NATGateway: # Crate NAT gateway and attach ElasticIP with NAT gateway
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt ElasticIP.AllocationId # Specify ElasticIP which attach to NATGateway
      Tags: 
        - Key: Name
          Value: Lab1_Group3_NATGateway

  ElasticIP: # Create Elastic IP for NAT gateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicRouteTable: # Create Public route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: Public Route Table
  
  PublicRoute: # Create route in public route table
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment # attach InternetGateway to VPC before create PublicRoute
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1 # Allow traffics go through InternetGateway

  PublicSubnet1PublicRouteTableAssociation: # Attach Public route table with PublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
         RouteTableId: !Ref PublicRouteTable
         SubnetId: !Ref PublicSubnet1

  PrivateRouteTable: # Create Private route table
    Type: AWS::EC2::RouteTable
    Properties:
         VpcId: !Ref VPC1
         Tags:
         - Key: Name
           Value: Private Route Table

  PrivateRoute: # Create route in private route table
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NATGateway # Allow traffics go through NATGateway

  PrivateSubnet1PrivateRouteTableAssociation: # Attach Private route table with PrivateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
         RouteTableId: !Ref PrivateRouteTable
         SubnetId: !Ref PrivateSubnet1


  